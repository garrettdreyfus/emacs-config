This is org-roam.info, produced by makeinfo version 6.5 from
org-roam.texi.

     Copyright (C) 2020-2020 Jethro Kuan <jethrokuan95@gmail.com>

     You can redistribute this document and/or modify it under the terms
     of the GNU General Public License as published by the Free Software
     Foundation, either version 3 of the License, or (at your option)
     any later version.

     This document is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org-roam: (org-roam). Rudimentary Roam Replica for Emacs.
END-INFO-DIR-ENTRY


File: org-roam.info,  Node: Top,  Next: Introduction,  Up: (dir)

Org-roam User Manual
********************


   This manual is for Org-roam version 1.2.2.

     Copyright (C) 2020-2020 Jethro Kuan <jethrokuan95@gmail.com>

     You can redistribute this document and/or modify it under the terms
     of the GNU General Public License as published by the Free Software
     Foundation, either version 3 of the License, or (at your option)
     any later version.

     This document is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

* Menu:

* Introduction::
* Target Audience::
* A Brief Introduction to the Zettelkasten Method::
* Installation::
* Getting Started::
* Anatomy of an Org-roam File::
* The Templating System::
* Concepts and Configuration::
* Inserting Links::
* Navigating Around::
* Encryption::
* Graphing::
* Org-roam Completion System::
* Roam Protocol::
* Daily Notes::
* Diagnosing and Repairing Files::
* Finding Unlinked References::
* Performance Optimization::
* Appendix::
* FAQ::

— The Detailed Node Listing —

Installation

* Installing from MELPA::
* Installing from Apt::
* Installing from the Git Repository::
* Post-Installation Tasks::

Anatomy of an Org-roam File

* Titles::
* Tags::
* File Refs::

The Templating System

* Template Walkthrough::
* Org-roam Template Expansion::

Concepts and Configuration

* Directories and Files::
* The Org-roam Buffer::
* Org-roam Files::

Navigating Around

* Index File::

Graphing

* Graph Options::
* Excluding Nodes and Edges::

Roam Protocol

* _::
* Installation: Installation (1).
* The roam-file protocol::
* The roam-ref protocol::

Performance Optimization

* Profiling Key Operations::
* Garbage Collection::

Appendix

* Note-taking Workflows::
* Ecosystem::

Ecosystem

* Browsing History with winner-mode::
* Versioning Notes::
* Full-text search interface with Deft::
* Org-journal::
* Note-taking Add-ons::


FAQ

* How do I have more than one Org-roam directory?::
* How do I migrate from Roam Research?::
* How do I create a note whose title already matches one of the candidates?::



File: org-roam.info,  Node: Introduction,  Next: Target Audience,  Prev: Top,  Up: Top

1 Introduction
**************

Org-roam is a Roam Research (https://roamresearch.com/) replica built
around the all-powerful Org-mode (https://orgmode.org/).

   Org-roam is a solution for effortless non-hierarchical note-taking
with Org-mode.  With Org-roam, notes flow naturally, making note-taking
fun and easy.  Org-roam should also work as a plug-and-play solution for
anyone already using Org-mode for their personal wiki.

   To understand more about Roam, a collection of links are available in
*note Note-taking Workflows::.

   Org-roam aims to implement the core features of Roam, leveraging the
mature ecosystem around Org-mode where possible.  Eventually, we hope to
further introduce features enabled by the Emacs ecosystem.

   Org-roam provides several benefits over other tooling:

Privacy and Security
     Edit your personal wiki completely offline, entirely in your
     control.  Encrypt your notes with GPG.
Longevity of Plain Text
     Unlike web solutions like Roam research, the notes are first and
     foremost plain Org-mode files – Org-roam simply builds up an
     auxilliary database to give the personal wiki superpowers.  Having
     your notes in plain-text is crucial for the longevity of your wiki.
     Never have to worry about proprietary web solutions being taken
     down.  Edit your plain-text notes in notepad if all other editors
     cease to exist
Free and Open Source
     Org-roam is free and open-source, which means that if you feel
     unhappy with any part of Org-roam, you may choose to extend
     Org-roam, or open a PR.
Leverages the Org-mode ecosystem
     Over the years, Emacs and Org-mode has developed into a mature
     system for plain-text organization.  Building upon Org-mode already
     puts Org-roam light-years ahead of many other solutions.
Built on Emacs
     Emacs is also a fantastic interface for editing text, and we can
     inherit many of the powerful text-navigation and editing packages
     available to Emacs.


File: org-roam.info,  Node: Target Audience,  Next: A Brief Introduction to the Zettelkasten Method,  Prev: Introduction,  Up: Top

2 Target Audience
*****************

Org-roam is a tool that will appear unfriendly to anyone unfamiliar with
Emacs and Org-mode, but is also extremely powerful to those willing to
put effort in mastering the intricacies of the tools.  Org-roam stands
on the shoulders on giants.  Emacs was first created in 1976, and
remains a top tier tool for editing text and designing textual
interfaces.  The malleability of Emacs allowed the creation of Org-mode,
an all-purpose plain-text system for maintaining TODO lists, planning
projects, and authoring documents.  Both of these tools are incredibly
vast and require significant time investment to master.

   Org-roam assumes basic familiarity with these tools.  It is not
difficult to get up and running with basic text-editing functionality,
but one will only fully appreciate the power of building Roam
functionality into Emacs and Org-mode when the usage of these tools
become more advanced.

   One key advantage to Org-roam is that building on top of Emacs gives
it malleability.  This is especially important for note-taking
workflows.  It is our belief that note-taking workflows are extremely
personal, and there is no one tool that’s perfect for you.  Org-mode and
Org-roam allows you to discover what works for you, and build that
perfect tool for yourself.

   If you are new to the software, and choose to take this leap of
faith, I hope you find yourself equally entranced as Neal Stephenson
was.

     Emacs outshines all other editing software in approximately the
     same way that the noonday sun does the stars.  It is not just
     bigger and brighter; it simply makes everything else vanish.  –
     Neal Stephenson, In the Beginning was the Command Line (1998)


File: org-roam.info,  Node: A Brief Introduction to the Zettelkasten Method,  Next: Installation,  Prev: Target Audience,  Up: Top

3 A Brief Introduction to the Zettelkasten Method
*************************************************

Org-roam provides utilities for maintaining a digital slip-box.  This
section aims to provide a brief introduction to the “slip-box”, or
“Zettelkasten” method.  By providing some background on the method, we
hope that the design decisions of Org-roam will become clear, and that
will aid in using Org-roam appropriately.  In this section we will also
introduce terms commonly used within the Zettelkasten community, which
will also commonly appear in the Org-roam forums and channels of
discussion.

   The Zettelkasten method of note-taking is designed to increase
research productivity: in particular, it acts as a research partner,
where conversations with it may produce new and surprising lines of
thought.  This method is attributed to German sociologist Niklas
Luhmann, who using the method had produced volumes of written works.

   In its paper form, the slip-box is simply a box of cards.  These
cards are small – often only large enough to fit a single concept.  The
size limitation encourages ideas to be broken down into individual
concepts.  These ideas are explicitly linked together.  The breakdown of
ideas encourages tangential exploration of ideas, increasing the surface
for thought.  Making linking explicit between notes also encourages one
to think about the connections between concepts.

   Org-roam is the slip-box, digitalized in Org-mode.  Every zettel
(card) is a plain-text, Org-mode file.  These files are often placed in
the same directory.  In the same way one would maintain a paper
slip-box, Org-roam makes it easy to create new zettels, pre-filling
boilerplate content using a powerful templating system.  Org-roam also
facilitates the linking of zettels using Org-mode ‘file:’ links.

   A slip-box requires a method of quickly capturing ideas.  These are
called *fleeting notes*: they are simple reminders of information or
ideas that will need to be processed later on, or trashed.  This is
typically accomplished using ‘org-capture’ (see *note (org)capture::),
or using Org-roam’s daily notes functionality (see *note Daily Notes::).
This provides a central inbox for collecting thoughts, to be processed
later into permanent notes.

   Permanent notes are further split into two categories: *literature
notes* and *concept notes*.  Literature notes can be brief annotations
on a particular source (e.g.  book, website or paper), that you’d like
to access later on.  Concept notes require much more care in authoring:
they need to be self-explanatory and detailed.  Org-roam’s templating
system supports the addition of different templates to facilitate the
creation of these notes.


File: org-roam.info,  Node: Installation,  Next: Getting Started,  Prev: A Brief Introduction to the Zettelkasten Method,  Up: Top

4 Installation
**************

Org-roam can be installed using Emacs’ package manager or manually from
its development repository.

* Menu:

* Installing from MELPA::
* Installing from Apt::
* Installing from the Git Repository::
* Post-Installation Tasks::


File: org-roam.info,  Node: Installing from MELPA,  Next: Installing from Apt,  Up: Installation

4.1 Installing from MELPA
=========================

Org-roam is available from Melpa and Melpa-Stable.  If you haven’t used
Emacs’ package manager before, you may familiarize yourself with it by
reading the documentation in the Emacs manual, see *note
(emacs)Packages::.  Then, add one of the archives to ‘package-archives’:

   • To use Melpa:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.org/packages/") t)

   • To use Melpa-Stable:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa-stable" . "http://stable.melpa.org/packages/") t)

   Org-roam also depends on a recent version of Org, which can be
obtained in Org’s package repository (see *note (org)Installation::).
To use Org’s ELPA archive:

     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

   Once you have added your preferred archive, you need to update the
local package list using:

     M-x package-refresh-contents RET

   Once you have done that, you can install Org-roam and its
dependencies using:

     M-x package-install RET org-roam RET

   Now see *note Post-Installation Tasks::.


File: org-roam.info,  Node: Installing from Apt,  Next: Installing from the Git Repository,  Prev: Installing from MELPA,  Up: Installation

4.2 Installing from Apt
=======================

Users of Debian 11 or later or Ubuntu 20.10 or later can simply install
Org-roam using Apt:

     apt-get install elpa-org-roam

   Org-roam will then be autoloaded into Emacs.


File: org-roam.info,  Node: Installing from the Git Repository,  Next: Post-Installation Tasks,  Prev: Installing from Apt,  Up: Installation

4.3 Installing from the Git Repository
======================================

You may install Org-roam directly from the repository on GitHub
(https://github.com/org-roam/org-roam) if you like.  This will give you
access to the latest version hours or days before it appears on MELPA,
and months (or more) before it is added to the Debian or Ubuntu
repositories.  This will also give you access to various developmental
branches that may be available.

   Note, however, that development version, and especially any feature
branches, may not always be in working order.  You’ll need to be
prepared to do some debugging, or to manually roll-back to working
versions, if you install from GitHub.

   Installing from GitHub requires that you clone the repository:

     git clone https://github.com/org-roam/org-roam.git /path/to/org/roam

   where ‘./path/to/org/roam’ is the location you will store your copy
of the code.

   Next, you need to add this location to your load path, and ‘require’
the Org-roam library.  Add the following code to your ‘.emacs’:

     (add-to-list 'load-path "/path/to/org/roam")
     (require 'org-roam)

   You now have Org-roam installed.  However, you don’t necessarily have
the dependencies that it requires.  These include:

   • dash
   • f
   • s
   • org
   • emacsql
   • emacsql-sqlite3

   You can install this manually as well, or get the latest version from
MELPA.  You may wish to use use-package
(https://github.com/jwiegley/use-package), straight.el
(https://github.com/raxod502/straight.el), or some other tool or tools
to help manage this.

   If you would like to install the manual for access from Emacs’
built-in Info system, you’ll need to compile the .texi source file, and
install it in an appropriate location.

   To compile the .texi source file, from a terminal navigate to the
‘/doc’ subdirectory of the Org-roam repository, and run the following:

     make infodir=/path/to/my/info/files install-info

   Where ‘/path/to/my/info/files’ is the location where you keep info
files.  This target directory needs to be stored in the variable
‘Info-default-directory-list‘.  If you aren’t using one of the default
info locations, you can configure this with the following in your
‘.emacs’ file:

     (require 'info)
     (add-to-list 'Info-default-directory-list
              "/path/to/my/info/files")

   You can also use one of the default locations, such as:

   • _usr/local/share/info_
   • _usr/share/info_
   • _usr/local/share/info_

   If you do this, you’ll need to make sure you have write-access to
that location, or run the above ‘make’ command as root.

   Now that the info file is ready, you need to add it to the
corresponding ‘dir’ file:

     install-info /path/to/my/info/files/org-roam.info /path/to/my/info/files/dir


File: org-roam.info,  Node: Post-Installation Tasks,  Prev: Installing from the Git Repository,  Up: Installation

4.4 Post-Installation Tasks
===========================

Org-roam uses ‘emacsql-sqlite3’, which requires ‘sqlite3’ to be located
on ‘exec-path’.  Please ensure that ‘sqlite3’ is installed appropriately
on your operating system.  You can verify that this is the case by
executing:

     (executable-find "sqlite3")

   If you have ‘sqlite3’ installed, and ‘executable-find’ still reports
‘nil’, then it is likely that the path to the executable is not a member
of the Emacs variable ‘exec-path’.  You may rectify this by manually
adding the path within your Emacs configuration:

     (add-to-list 'exec-path "path/to/sqlite3")


File: org-roam.info,  Node: Getting Started,  Next: Anatomy of an Org-roam File,  Prev: Installation,  Up: Top

5 Getting Started
*****************

This short tutorial describes the essential commands used in Org-roam,
to help you get started.

   First, it is important to understand how Org-roam was designed.
Org-roam was built to support a workflow that was not possible with
vanilla Org-mode.  This flow is modelled after the Zettelkasten Method
(https://zettelkasten.de/), and many of Roam Research’s
(https://roamresearch.com) workflows.  Org-roam does not magically make
note-taking better – this often requires a radical change in your
current note-taking workflow.  To understand more about the methods and
madness, see *note Note-taking Workflows::.

   To first start using Org-roam, one needs to pick a location to store
the Org-roam files.  The directory that will contain your notes, and
database index is specified by the variable ‘org-roam-directory’.  This
variable needs to be set before any calls to Org-roam functions,
including enabling ‘org-roam-mode’.  For this tutorial, create an empty
directory, and set ‘org-roam-directory’:

     (make-directory "~/org-roam")
     (setq org-roam-directory "~/org-roam")

   We encourage using a flat hierarchy for storing notes, but some
prefer using folders for storing specific kinds of notes (e.g.
websites, papers).  This is fine; Org-roam searches recursively within
‘org-roam-directory’ for any notes.  Instead of relying on the file
hierarchy for any form of categorization, we solely rely on links
between files to establish connections between notes.

   Next, we need to enable the global minor mode ‘org-roam-mode’.  This
sets up Emacs with several hooks, builds a cache and keeps it
consistent.  We recommend starting ‘org-roam-mode’ on startup:

     (add-hook 'after-init-hook 'org-roam-mode)

   To build the cache manually, one can run ‘M-x
org-roam-db-build-cache’.  The cache is a sqlite database named
‘org-roam.db’, which defaults to residing in the root
‘org-roam-directory’.  Cache builds may take a while the first time, but
is often instantaneous in subsequent runs.

   Let us now create our first note.  Call ‘M-x org-roam-find-file’.
This shows a list of titles for notes that reside in
‘org-roam-directory’.  It should show nothing right now, since there are
no notes in the directory.  Entering the title of the note you wish to
create, and pressing ‘RET’ should begin the note creation process.  This
process uses ‘org-capture’’s templating system, and can be freely
customized (see *note The Templating System::).  Using the default
template, pressing ‘C-c C-c’ finishes the note capture.  Running ‘M-x
org-roam-find-file’ again should show the note you have created, and
selecting that entry will bring you to that note.

   The crux of Org-roam is making it easy to create notes, and link them
together.  To link notes together, we call ‘M-x org-roam-insert’.  This
brings up a prompt with a list of title for existing notes.  Selecting
an existing entry will create and insert a link to the current file.
Entering a non-existent title will create a new note with that title.
Good usage of Org-roam requires liberally linking files: this
facilitates building up a dense knowledge graph of inter-connected
notes.

   Org-roam provides an interface to view backlinks.  It shows backlinks
for the currently active Org-roam note, along with some surrounding
context.  To toggle the visibility of this buffer, call ‘M-x org-roam’.

   For a visual representation of the notes and their connections,
Org-roam also provides graphing capabilities, using Graphviz.  It
generates graphs with notes as nodes, and links between them as edges.
The generated graph can be used to navigate to the files, but this
requires some additional setup (see *note Roam Protocol: Roam
Protocol.).


File: org-roam.info,  Node: Anatomy of an Org-roam File,  Next: The Templating System,  Prev: Getting Started,  Up: Top

6 Anatomy of an Org-roam File
*****************************

The bulk of Org-roam’s functionality is built on top of vanilla
Org-mode.  However, to support additional functionality, Org-roam adds
several Org-roam-specific keywords.  These functionality are not crucial
to effective use of Org-roam.

* Menu:

* Titles::
* Tags::
* File Refs::


File: org-roam.info,  Node: Titles,  Next: Tags,  Up: Anatomy of an Org-roam File

6.1 Titles
==========

To easily find a note, a title needs to be prescribed to a note.  A note
can have many titles: this allows a note to be referred to by different
names, which is especially useful for topics or concepts with acronyms.
For example, for a note like “World War 2”, it may be desirable to also
refer to it using the acronym “WWII”.

   Org-roam calls ‘org-roam--extract-titles’ to extract titles.  It uses
the variable ‘org-roam-title-sources’, to control how the titles are
extracted.  The title extraction methods supported are:

  1. ‘'title’: This extracts the title using the file ‘#+title’ property
  2. ‘'headline’: This extracts the title from the first headline in the
     Org file
  3. ‘'alias’: This extracts a list of titles using the ‘#+roam_alias’
     property.  The aliases are space-delimited, and can be multi-worded
     using quotes

   Take for example the following org file:

     #+title: World War 2
     #+roam_alias: "WWII" "World War II"

     * Headline

Method        Titles
-----------------------------------------
‘'title’      ’(“World War 2”)
‘'headline’   ’(“Headline”)
‘'alias’      ’(“WWII” “World War II”)

   One can freely control which extraction methods to use by customizing
‘org-roam-title-sources’: see the doc-string for the variable for more
information.  If all methods of title extraction return no results, the
file-name is used in place of the titles for completions.

   If you wish to add your own title extraction method, you may push a
symbol ‘'foo’ into ‘org-roam-title-sources’, and define a
‘org-roam--extract-titles-foo’ which accepts no arguments.  See
‘org-roam--extract-titles-title’ for an example.


File: org-roam.info,  Node: Tags,  Next: File Refs,  Prev: Titles,  Up: Anatomy of an Org-roam File

6.2 Tags
========

Tags are used as meta-data for files: they facilitate interactions with
notes where titles are insufficient.  For example, tags allow for
categorization of notes: differentiating between bibliographical and
structure notes during interactive commands.

   Org-roam calls ‘org-roam--extract-tags’ to extract tags from files.
It uses the variable ‘org-roam-tag-sources’, to control how tags are
extracted.  The tag extraction methods supported are:

  1. ‘'prop’: This extracts tags from the ‘#+roam_tags’ property.  Tags
     are space delimited, and can be multi-word using double quotes.
  2. ‘'all-directories’: All sub-directories relative to
     ‘org-roam-directory’ are extracted as tags.  That is, if a file is
     located at relative path ‘foo/bar/file.org’, the file will have
     tags ‘foo’ and ‘bar’.
  3. ‘'last-directory’: Extracts the last directory relative to
     ‘org-roam-directory’ as the tag.  That is, if a file is located at
     relative path ‘foo/bar/file.org’, the file will have tag ‘bar’.
  4. ‘'first-directory’: Extracts the first directory relative to
     ‘org-roam-directory’ as the tag.  That is, if a file is located at
     relative path ‘foo/bar/file.org’, the file will have tag ‘foo’.

   By default, only the ‘'prop’ extraction method is enabled.  To enable
the other extraction methods, you may modify ‘org-roam-tag-sources’:

     (setq org-roam-tag-sources '(prop last-directory))

   If you wish to add your own tag extraction method, you may push a
symbol ‘'foo’ into ‘org-roam-tag-sources’, and define a
‘org-roam--extract-tags-foo’ which accepts the absolute file path as its
argument.  See ‘org-roam--extract-tags-prop’ for an example.


File: org-roam.info,  Node: File Refs,  Prev: Tags,  Up: Anatomy of an Org-roam File

6.3 File Refs
=============

Refs are unique identifiers for files.  Each note can only have 1 ref.
For example, a note for a website may contain a ref:

     #+title: Google
     #+roam_key: https://www.google.com/

   These keys come in useful for when taking website notes, using the
‘roam-ref’ protocol (see *note Roam Protocol::).

   Alternatively, add a ref for notes for a specific paper, using its
org-ref (https://github.com/jkitchin/org-ref) citation key:

     #+title: Neural Ordinary Differential Equations
     #+roam_key: cite:chen18_neural_ordin_differ_equat

   The backlinks buffer will show any cites of this key: e.g.

 [image src="images/org-ref-citelink.png" ]

Figure: org-ref-citelink


File: org-roam.info,  Node: The Templating System,  Next: Concepts and Configuration,  Prev: Anatomy of an Org-roam File,  Up: Top

7 The Templating System
***********************

Rather than creating blank files on ‘org-roam-insert’ and
‘org-roam-find-file’, it may be desirable to prefill the file with
templated content.  This may include:

   • Time of creation
   • File it was created from
   • Clipboard content
   • Any other data you may want to input manually

   This requires a complex template insertion system.  Fortunately, Org
ships with a powerful one: ‘org-capture’ (see *note (org)capture::).
However, org-capture was not designed for such use.  Org-roam abuses
‘org-capture’, extending its syntax and capabilities.  To first
understand how org-roam’s templating system works, it may be useful to
look into basic usage of ‘org-capture’.

   For these reasons, Org-roam capture templates are not compatible with
regular ‘org-capture’.  Hence, Org-roam’s templates can be customized by
instead modifying the variable ‘org-roam-capture-templates’.  Just like
‘org-capture-templates’, ‘org-roam-capture-templates’ can contain
multiple templates.  If ‘org-roam-capture-templates’ only contains one
template, there will be no prompt for template selection.

* Menu:

* Template Walkthrough::
* Org-roam Template Expansion::


File: org-roam.info,  Node: Template Walkthrough,  Next: Org-roam Template Expansion,  Up: The Templating System

7.1 Template Walkthrough
========================

To demonstrate the additions made to org-capture templates.  Here, we
walkthrough the default template, reproduced below.

     ("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "%<%Y%m%d%H%M%S>-${slug}"
          :head "#+title: ${title}\n"
          :unnarrowed t)

  1. The template has short key ‘"d"’.  If you have only one template,
     org-roam automatically chooses this template for you.
  2. The template is given a description of ‘"default"’.
  3. ‘plain’ text is inserted.  Other options include Org headings via
     ‘entry’.
  4. ‘(function org-roam--capture-get-point)’ should not be changed.
  5. ‘"%?"’ is the template inserted on each call to
     ‘org-roam-capture--capture’.  This template means don’t insert any
     content, but place the cursor here.
  6. ‘:file-name’ is the file-name template for a new note, if it
     doesn’t yet exist.  This creates a file at path that looks like
     ‘/path/to/org-roam-directory/20200213032037-foo.org’.  This
     template also allows you to specify if you want the note to go into
     a subdirectory.  For example, the template ‘private/${slug}’ will
     create notes in ‘/path/to/org-roam-directory/private’.
  7. ‘:head’ contains the initial template to be inserted (once only),
     at the beginning of the file.  Here, the title global attribute is
     inserted.
  8. ‘:unnarrowed t’ tells org-capture to show the contents for the
     whole file, rather than narrowing to just the entry.

   Other options you may want to learn about include
‘:immediate-finish’.


File: org-roam.info,  Node: Org-roam Template Expansion,  Prev: Template Walkthrough,  Up: The Templating System

7.2 Org-roam Template Expansion
===============================

Org-roam’s template definitions also extend org-capture’s template
syntax, to allow prefilling of strings.  We have seen a glimpse of this
in *note Template Walkthrough: Template Walkthrough.

   In org-roam templates, the ‘${var}’ syntax allows for the expansion
of variables, stored in ‘org-roam-capture--info’.  For example, during
‘org-roam-insert’, the user is prompted for a title.  Upon entering a
non-existent title, the ‘title’ key in ‘org-roam-capture--info’ is set
to the provided title.  ‘${title}’ is then expanded into the provided
title during the org-capture process.  Any variables that do not contain
strings, are prompted for values using ‘completing-read’.

   After doing this expansion, the org-capture’s template expansion
system is used to fill up the rest of the template.  You may read up
more on this on org-capture’s documentation page
(https://orgmode.org/manual/Template-expansion.html#Template-expansion).

   To illustrate this dual expansion process, take for example the
template string: ‘"%<%Y%m%d%H%M%S>-${title}"’, with the title ‘"Foo"’.
The template is first expanded into ‘%<%Y%m%d%H%M%S>-Foo’.  Then
org-capture expands ‘%<%Y%m%d%H%M%S>’ with timestamp: e.g.
‘20200213032037-Foo’.

   All of the flexibility afforded by Emacs and Org-mode are available.
For example, if you want to encode a UTC timestamp in the filename, you
can take advantage of org-mode’s ‘%(EXP)’ template expansion to call
‘format-time-string’ directly to provide its third argument to specify
UTC.

     ("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
          :head "#+title: ${title}\n"
          :unnarrowed t)


File: org-roam.info,  Node: Concepts and Configuration,  Next: Inserting Links,  Prev: The Templating System,  Up: Top

8 Concepts and Configuration
****************************

The number of configuration options is deliberately kept small, to keep
the Org-roam codebase manageable.  However, we attempt to accommodate as
many usage styles as possible.

   All of Org-roam’s customization options can be viewed via ‘M-x
customize-group org-roam’.

* Menu:

* Directories and Files::
* The Org-roam Buffer::
* Org-roam Files::


File: org-roam.info,  Node: Directories and Files,  Next: The Org-roam Buffer,  Up: Concepts and Configuration

8.1 Directories and Files
=========================

This section concerns the placement and creation of files.

   • Variable: org-roam-directory

     This is the default path to Org-roam files.  All Org files, at any
     level of nesting, are considered part of the Org-roam.

   • Variable: org-roam-db-location

     Location of the Org-roam database.  If this is non-nil, the
     Org-roam sqlite database is saved here.

     It is the user’s responsibility to set this correctly, especially
     when used with multiple Org-roam instances.

   • Variable: org-roam-file-exclude-regexp

     Files matching this regular expression are excluded from the
     Org-roam.


File: org-roam.info,  Node: The Org-roam Buffer,  Next: Org-roam Files,  Prev: Directories and Files,  Up: Concepts and Configuration

8.2 The Org-roam Buffer
=======================

The Org-roam buffer displays backlinks for the currently active Org-roam
note.

   • User Option: org-roam-buffer

     The name of the org-roam buffer.  Defaults to ‘*org-roam*’.

   • User Option: org-roam-buffer-position

     The position of the Org-roam buffer side window.  Valid values are
     ‘'left’, ‘'right’, ‘'top’, ‘'bottom’.

   • User Option: org-roam-buffer-width

     Width of ‘org-roam-buffer’.  Has an effect only if
     ‘org-roam-buffer-position’ is ‘'left’ or ‘'right’.

   • User Option: org-roam-buffer-height

     Height of ‘org-roam-buffer’.  Has an effect only if
     ‘org-roam-buffer-position’ is ‘'top’ or ‘'bottom’.

   • User Option: org-roam-buffer-window-parameters

     Additional window parameters for the org-roam-buffer side window.

     For example one can prevent the window from being deleted when
     calling ‘delete-other-windows’, by setting it with the following:

     ‘(setq org-roam-buffer-window-parameters '((no-delete-other-windows
     . t)))’


File: org-roam.info,  Node: Org-roam Files,  Prev: The Org-roam Buffer,  Up: Concepts and Configuration

8.3 Org-roam Files
==================

Org-roam files are created and prefilled using Org-roam’s templating
system.  The templating system is customizable (see *note The Templating
System::).


File: org-roam.info,  Node: Inserting Links,  Next: Navigating Around,  Prev: Concepts and Configuration,  Up: Top

9 Inserting Links
*****************

The preferred mode of linking is via ‘file’ links to files, and ‘id’
links for headlines.  This maintains the strongest compatibility with
Org-mode, ensuring that the links still function without Org-roam, and
work well exporting to other backends.

   ‘file’ links can be inserted via ‘org-roam-insert’.  Links to
headlines can be inserted by navigating to the desired headline and
calling ‘org-store-link’.  This will create an ID for the headline if it
does not already exist, and populate the Org-roam database.  The link
can then be inserted via ‘org-insert-link’.

   An alternative mode of insertion is using Org-roam’s ‘roam’ links.
Org-roam registers this link type, and interprets the path as follows:

‘[[roam:title]]’
     links to an Org-roam file with title or alias “title”
‘[[roam:*headline]]’
     links to the headline “headline” in the current Org-roam file
‘[[roam:title*headline]]’
     links to the headline “headline” in the Org-roam file with title or
     alias “title”

   ‘roam’ links support auto-completion via ‘completion-at-point’:
simply call ‘completion-at-point’ within a roam link.  Users of
‘company-mode’ may want to prepend ‘company-capf’ to the beginning of
variable ‘company-backends’.

   To easily insert ‘roam’ links, one may wish to use a package like
key-chord (https://github.com/emacsorphanage/key-chord/).  In the
following example, typing “[[” will insert a stub ‘roam’ link:

     (key-chord-define org-mode-map "[[" #'my/insert-roam-link)

     (defun my/insert-roam-link ()
         "Inserts an Org-roam link."
         (interactive)
         (insert "[[roam:]]")
         (backward-char 2))

   • User Option: org-roam-link-title-format

     To distinguish between org-roam links and regular links, one may
     choose to use special indicators for Org-roam links.  Defaults to
     ‘"%s"’.

     If your version of Org is at least ‘9.2’, consider styling the link
     differently, by customizing the ‘org-roam-link’, and
     ‘org-roam-link-current’ faces.

   • User Option: org-roam-completion-ignore-case

     When non-nil, the ‘roam’ link completions are ignore case.  For
     example, calling ‘completion-at-point’ within ‘[[roam:fo]]’ will
     present a completion for a file with title “Foo”.  Defaults to ‘t’.

   • User Option: org-roam-link-auto-replace

     When non-nil, ‘roam’ links will be replaced with ‘file’ or ‘id’
     links when they are navigated to, and on file save, when a match is
     found.  This is desirable to maintain compatibility with vanilla
     Org, but resolved links are harder to edit.  Defaults to ‘t’.


File: org-roam.info,  Node: Navigating Around,  Next: Encryption,  Prev: Inserting Links,  Up: Top

10 Navigating Around
********************

* Menu:

* Index File::


File: org-roam.info,  Node: Index File,  Up: Navigating Around

10.1 Index File
===============

As your collection grows, you might want to create an index where you
keep links to your main files.

   In Org-roam, you can define the path to your index file by setting
‘org-roam-index-file’.

   • Variable: org-roam-index-file

     Path to the Org-roam index file.

     The path can be a string or a function.  If it is a string, it
     should be the path (absolute or relative to ‘org-roam-directory’)
     to the index file.  If it is is a function, the function should
     return the path to the index file.  Otherwise, the index is assumed
     to be a note in ‘org-roam-index’ whose title is ‘"Index"’.

   • Function: org-roam-find-index

     Opens the Index file in the current ‘org-roam-directory’.


File: org-roam.info,  Node: Encryption,  Next: Graphing,  Prev: Navigating Around,  Up: Top

11 Encryption
*************

One may wish to keep private, encrypted files.  Org-roam supports
encryption (via GPG), which can be enabled for all new files by setting
‘org-roam-encrypt-files’ to ‘t’.  When enabled, new files are created
with the ‘.org.gpg’ extension and decryption are handled automatically
by EasyPG.

   Note that Emacs will prompt for a password for encrypted files during
cache updates if it requires reading the encrypted file.  To reduce the
number of password prompts, you may wish to cache the password.

   • Variable: org-roam-encrypt-files

     Whether to encrypt new files.  If true, create files with .org.gpg
     extension.


File: org-roam.info,  Node: Graphing,  Next: Org-roam Completion System,  Prev: Encryption,  Up: Top

12 Graphing
***********

Org-roam provides graphing capabilities to explore interconnections
between notes.  This is done by performing SQL queries and generating
images using Graphviz (https://graphviz.org/).  The graph can also be
navigated: see *note Roam Protocol::.

   The entry point to graph creation is ‘org-roam-graph’.

   • Function: org-roam-graph & optional arg file node-query

     Build and possibly display a graph for FILE from NODE-QUERY.  If
     FILE is nil, default to current buffer’s file name.  ARG may be any
     of the following values:

        • ‘nil’ show the graph.
        • ‘C-u’ show the graph for FILE.
        • ‘C-u N’ show the graph for FILE limiting nodes to N steps.
        • ‘C-u C-u’ build the graph.
        • ‘C-u -’ build the graph for FILE.
        • ‘C-u -N’ build the graph for FILE limiting nodes to N steps.

   • User Option: org-roam-graph-executable

     Path to the graphing executable (in this case, Graphviz).  Set this
     if Org-roam is unable to find the Graphviz executable on your
     system.

     You may also choose to use ‘neato’ in place of ‘dot’, which
     generates a more compact graph layout.

   • User Option: org-roam-graph-viewer

     Org-roam defaults to using Firefox (located on PATH) to view the
     SVG, but you may choose to set it to:

       1. A string, which is a path to the program used
       2. a function accepting a single argument: the graph file path.

     ‘nil’ uses ‘view-file’ to view the graph.

     If you are using WSL2 and would like to open the graph in Windows,
     you can use the second option to set the browser and network file
     path:

          (setq org-roam-graph-viewer
              (lambda (file)
                (let ((org-roam-graph-viewer "/mnt/c/Program Files/Mozilla Firefox/firefox.exe"))
                  (org-roam-graph--open (concat "file://///wsl$/Ubuntu" file)))))

* Menu:

* Graph Options::
* Excluding Nodes and Edges::


File: org-roam.info,  Node: Graph Options,  Next: Excluding Nodes and Edges,  Up: Graphing

12.1 Graph Options
==================

Graphviz provides many options for customizing the graph output, and
Org-roam supports some of them.  See
<https://graphviz.gitlab.io/_pages/doc/info/attrs.html> for customizable
options.

   • User Option: org-roam-graph-extra-config

     Extra options passed to graphviz for the digraph (The “G”
     attributes).  Example: ‘'~(("rankdir" . "LR"))’

   • User Option: org-roam-graph-node-extra-config

     Extra options for nodes in the graphviz output (The “N”
     attributes).  Example: ‘'(("color" . "skyblue"))’

   • User Option: org-roam-graph-edge-extra-config

     Extra options for edges in the graphviz output (The “E”
     attributes).  Example: ‘'(("dir" . "back"))’

   • User Option: org-roam-graph-edge-cites-extra-config

     Extra options for citation edges in the graphviz output.  Example:
     ‘'(("color" . "red"))’


File: org-roam.info,  Node: Excluding Nodes and Edges,  Prev: Graph Options,  Up: Graphing

12.2 Excluding Nodes and Edges
==============================

One may want to exclude certain files to declutter the graph.

   • User Option: org-roam-graph-exclude-matcher

     Matcher for excluding nodes from the generated graph.  Any nodes
     and links for file paths matching this string is excluded from the
     graph.

     If value is a string, the string is the only matcher.

     If value is a list, all file paths matching any of the strings are
     excluded.

     (setq org-roam-graph-exclude-matcher '("private" "dailies"))

   This setting excludes all files whose path contain “private” or
“dailies”.


File: org-roam.info,  Node: Org-roam Completion System,  Next: Roam Protocol,  Prev: Graphing,  Up: Top

13 Org-roam Completion System
*****************************

Org-roam allows customization of which minibuffer completion system to
use for its interactive commands.  The default setting uses Emacs’
standard ‘completing-read’ mechanism.

     (setq org-roam-completion-system 'default)

   If you have installed Helm or Ivy, and have their modes enabled,
under the ‘'default’ setting they will be used.

   In the rare scenario where you use Ivy globally, but prefer Helm
(https://emacs-helm.github.io/helm/) for org-roam commands, set:

     (setq org-roam-completion-system 'helm)

   Other options include ‘'ido’, and ‘'ivy’.


File: org-roam.info,  Node: Roam Protocol,  Next: Daily Notes,  Prev: Org-roam Completion System,  Up: Top

14 Roam Protocol
****************

* Menu:

* _::
* Installation: Installation (1).
* The roam-file protocol::
* The roam-ref protocol::


File: org-roam.info,  Node: _,  Next: Installation (1),  Up: Roam Protocol

14.1 _ :ignore:
===============

Org-roam extending ‘org-protocol’ with 2 protocols: the ‘roam-file’ and
‘roam-ref’ protocol.


File: org-roam.info,  Node: Installation (1),  Next: The roam-file protocol,  Prev: _,  Up: Roam Protocol

14.2 Installation
=================

To enable Org-roam’s protocol extensions, you have to add the following
to your init file:

     (require 'org-roam-protocol)

   The instructions for setting up ‘org-protocol’ are reproduced below.

   We will also need to create a desktop application for ‘emacsclient’.
The instructions for various platforms are shown below.

   For Linux users, create a desktop application in
‘~/.local/share/applications/org-protocol.desktop’:

     [Desktop Entry]
     Name=Org-Protocol
     Exec=emacsclient %u
     Icon=emacs-icon
     Type=Application
     Terminal=false
     MimeType=x-scheme-handler/org-protocol

   Associate ‘org-protocol://’ links with the desktop application by
running in your shell:

     xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol

   To disable the “confirm” prompt in Chrome, you can also make Chrome
show a checkbox to tick, so that the ‘Org-Protocol Client’ app will be
used without confirmation.  To do this, run in a shell:

     sudo mkdir -p /etc/opt/chrome/policies/managed/
     sudo tee /etc/opt/chrome/policies/managed/external_protocol_dialog.json >/dev/null <<'EOF'
     {
       "ExternalProtocolDialogShowAlwaysOpenCheckbox": true
     }
     EOF
     sudo chmod 644 /etc/opt/chrome/policies/managed/external_protocol_dialog.json

   and then restart Chrome (for example, by navigating to
<chrome://restart>) to make the new policy take effect.

   See here (https://www.chromium.org/administrators/linux-quick-start)
for more info on the ‘/etc/opt/chrome/policies/managed’ directory and
here
(https://cloud.google.com/docs/chrome-enterprise/policies/?policy=ExternalProtocolDialogShowAlwaysOpenCheckbox)
for information on the ‘ExternalProtocolDialogShowAlwaysOpenCheckbox’
policy.

   For MacOS, one solution is to use Platypus
(https://github.com/sveinbjornt/Platypus).  Here are the instructions
for setting up with Platypus and Chrome:

  1. Install and launch Platypus (with Homebrew (https://brew.sh/)):

     brew cask install platypus

  1. Create a script ‘launch_emacs.sh’:

     #!/usr/bin/env bash
     /usr/local/bin/emacsclient --no-wait $1

  1. Create a Platypus app with the following settings:

     | Setting                        | Value                     |
     |--------------------------------+---------------------------|
     | App Name                       | "OrgProtocol"             |
     | Script Type                    | "env" · "/usr/bin/env"    |
     | Script Path                    | "path/to/launch-emacs.sh" |
     | Interface                      | None                      |
     | Accept dropped items           | true                      |
     | Remain running after execution | false                     |

   Inside ‘Settings’:

     | Setting                        | Value          |
     |--------------------------------+----------------|
     | Accept dropped files           | true           |
     | Register as URI scheme handler | true           |
     | Protocol                       | "org-protocol" |

   To disable the “confirm” prompt in Chrome, you can also make Chrome
show a checkbox to tick, so that the ‘OrgProtocol’ app will be used
without confirmation.  To do this, run in a shell:

     defaults write com.google.Chrome ExternalProtocolDialogShowAlwaysOpenCheckbox -bool true

   If you’re using Emacs Mac Port
(https://github.com/railwaycat/homebrew-emacsmacport), it registered its
‘Emacs.app‘ as the default handler for the URL scheme ‘org-protocol‘.
To make ‘OrgProtocol.app’ the default handler instead, run:

     defaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add \
     '{"LSHandlerPreferredVersions" = { "LSHandlerRoleAll" = "-"; }; LSHandlerRoleAll = "org.yourusername.OrgProtocol"; LSHandlerURLScheme = "org-protocol";}'

   Then restart your computer.

   For Windows, create a temporary ‘org-protocol.reg’ file:

     REGEDIT4

     [HKEY_CLASSES_ROOT\org-protocol]
     @="URL:Org Protocol"
     "URL Protocol"=""
     [HKEY_CLASSES_ROOT\org-protocol\shell]
     [HKEY_CLASSES_ROOT\org-protocol\shell\open]
     [HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
     @="\"C:\\Windows\\System32\\wsl.exe\" emacsclient \"%1\""

   The above will forward the protocol to WSL.  If you run Emacs
natively on Windows, replace the last line with:

     @="\"c:\\path\\to\\emacs\\bin\\emacsclientw.exe\"  \"%1\""

   After executing the .reg file, the protocol is registered and you can
delete the file.


File: org-roam.info,  Node: The roam-file protocol,  Next: The roam-ref protocol,  Prev: Installation (1),  Up: Roam Protocol

14.3 The roam-file protocol
===========================

This is a simple protocol that opens the path specified by the ‘file’
key (e.g.  ‘org-protocol://roam-file?file=/tmp/file.org’).  This is used
in the generated graph.


File: org-roam.info,  Node: The roam-ref protocol,  Prev: The roam-file protocol,  Up: Roam Protocol

14.4 The roam-ref protocol
==========================

This protocol finds or creates a new note with a given ‘roam_key’ (see
*note Anatomy of an Org-roam File::):

 [image src="images/roam-ref.gif" ]

   To use this, create the following bookmarklet
(https://en.wikipedia.org/wiki/Bookmarklet) in your browser:

     javascript:location.href =
     'org-protocol://roam-ref?template=r&ref='
     + encodeURIComponent(location.href)
     + '&title='
     + encodeURIComponent(document.title)

   or as a keybinding in ‘qutebrowser’ in , using the ‘config.py’ file
(see Configuring qutebrowser
(https://github.com/qutebrowser/qutebrowser/blob/master/doc/help/configuring.asciidoc)):

     config.bind("<Ctrl-r>", "open javascript:location.href='org-protocol://roam-ref?template=r&ref='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)")

   where ‘template’ is the template key for a template in
‘org-roam-capture-ref-templates’ (see *note The Templating System::).
These templates should contain a ‘#+roam_key: ${ref}’ in it.


File: org-roam.info,  Node: Daily Notes,  Next: Diagnosing and Repairing Files,  Prev: Roam Protocol,  Up: Top

15 *TODO* Daily Notes
*********************


File: org-roam.info,  Node: Diagnosing and Repairing Files,  Next: Finding Unlinked References,  Prev: Daily Notes,  Up: Top

16 Diagnosing and Repairing Files
*********************************

Org-roam provides a utility for diagnosing and repairing problematic
files via ‘org-roam-doctor’.  By default, ‘org-roam-doctor’ runs the
check on the current Org-roam file.  To run the check only for the
current file, run ‘C-u M-x org-roam-doctor’, but note that this may take
some time.

   • Function: org-roam-doctor &optional this-buffer

     Perform a check on Org-roam files to ensure cleanliness.  If
     THIS-BUFFER, run the check only for the current buffer.

   The checks run are defined in ‘org-roam-doctor--checkers’.  Each
checker is an instance of ‘org-roam-doctor-checker’.  To define a
checker, use ‘make-org-roam-doctor-checker’.  Here is a sample
definition:

     (make-org-roam-doctor-checker
         :name 'org-roam-doctor-broken-links
         :description "Fix broken links."
         :actions '(("d" . ("Unlink" . org-roam-doctor--remove-link))
                    ("r" . ("Replace link" . org-roam-doctor--replace-link))
                    ("R" . ("Replace link (keep label)" . org-roam-doctor--replace-link-keep-label))))

   The ‘:name’ property is the name of the function run.  The function
takes in the Org parse tree, and returns a list of ‘(point
error-message)’.  ‘:description’ is a short description of what the
checker does.  ‘:actions’ is an alist containing elements of the form
‘(char . (prompt . function))’.  These actions are defined per checker,
to perform autofixes for the errors.  For each error detected,
‘org-roam-doctor’ will move the point to the current error, and pop-up a
help window displaying the error message, as well as the list of actions
that can be taken provided in ‘:actions’.


File: org-roam.info,  Node: Finding Unlinked References,  Next: Performance Optimization,  Prev: Diagnosing and Repairing Files,  Up: Top

17 Finding Unlinked References
******************************

Unlinked references are occurrences of strings of text that exactly
match the title or alias of an existing note in the Org-roam database.
Org-roam provides facilities for discovering these unlinked references,
so one may decide whether to convert them into links.

   To use this feature, simply call ‘M-x org-roam-unlinked-references’
from within an Org-roam note.  Org-roam uses ripgrep
(https://github.com/BurntSushi/ripgrep), specifically a clever PCRE
regex to find occurrences of the title or aliases of the currently open
note in all Org-roam files.  This thus requires a version of ripgrep
that is compiled with PCRE support.


File: org-roam.info,  Node: Performance Optimization,  Next: Appendix,  Prev: Finding Unlinked References,  Up: Top

18 Performance Optimization
***************************

* Menu:

* Profiling Key Operations::
* Garbage Collection::


File: org-roam.info,  Node: Profiling Key Operations,  Next: Garbage Collection,  Up: Performance Optimization

18.1 *TODO* Profiling Key Operations
====================================


File: org-roam.info,  Node: Garbage Collection,  Prev: Profiling Key Operations,  Up: Performance Optimization

18.2 Garbage Collection
=======================

During the cache-build process, Org-roam generates a lot of in-memory
data-structures (such as the Org file’s AST), which are discarded after
use.  These structures are garbage collected at regular intervals (see
*note info:elisp#Garbage Collection: (elisp)Garbage Collection.).

   Org-roam provides the option ‘org-roam-db-gc-threshold’ to
temporarily change the threshold value for GC to be triggered during
these memory-intensive operations.  To reduce the number of garbage
collection processes, one may set ‘org-roam-db-gc-threshold’ to a high
value (such as ‘most-positive-fixnum’):

     (setq org-roam-db-gc-threshold most-positive-fixnum)


File: org-roam.info,  Node: Appendix,  Next: FAQ,  Prev: Performance Optimization,  Up: Top

19 Appendix
***********

* Menu:

* Note-taking Workflows::
* Ecosystem::


File: org-roam.info,  Node: Note-taking Workflows,  Next: Ecosystem,  Up: Appendix

19.1 Note-taking Workflows
==========================

Books
        • How To Take Smart Notes
          (https://www.goodreads.com/book/show/34507927-how-to-take-smart-notes)
Articles
        • The Zettelkasten Method - LessWrong 2.0
          (https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1)
        • Building a Second Brain in Roam...And Why You Might Want To :
          RoamResearch
          (https://reddit.com/r/RoamResearch/comments/eho7de/building_a_second_brain_in_roamand_why_you_might)
        • Roam Research: Why I Love It and How I Use It - Nat Eliason
          (https://www.nateliason.com/blog/roam)
        • Adam Keesling’s Twitter Thread
          (https://twitter.com/adam_keesling/status/1196864424725774336?s=20)
        • How To Take Smart Notes With Org-mode · Jethro Kuan
          (https://blog.jethro.dev/posts/how_to_take_smart_notes_org/)
Threads
        • Ask HN: How to Take Good Notes
          (https://news.ycombinator.com/item?id=22473209)
Videos
        • How to Use Roam to Outline a New Article in Under 20 Minutes
          (https://www.youtube.com/watch?v=RvWic15iXjk)


File: org-roam.info,  Node: Ecosystem,  Prev: Note-taking Workflows,  Up: Appendix

19.2 Ecosystem
==============

* Menu:

* Browsing History with winner-mode::
* Versioning Notes::
* Full-text search interface with Deft::
* Org-journal::
* Note-taking Add-ons::


File: org-roam.info,  Node: Browsing History with winner-mode,  Next: Versioning Notes,  Up: Ecosystem

19.2.1 Browsing History with winner-mode
----------------------------------------

‘winner-mode’ is a global minor mode that allows one to undo and redo
changes in the window configuration.  It is included with GNU Emacs
since version 20.

   ‘winner-mode’ can be used as a simple version of browser history for
Org-roam.  Each click through org-roam links (from both Org files and
the backlinks buffer) causes changes in window configuration, which can
be undone and redone using ‘winner-mode’.  To use ‘winner-mode’, simply
enable it, and bind the appropriate interactive functions:

     (winner-mode +1)
     (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
     (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)



File: org-roam.info,  Node: Versioning Notes,  Next: Full-text search interface with Deft,  Prev: Browsing History with winner-mode,  Up: Ecosystem

19.2.2 Versioning Notes
-----------------------

Since Org-roam notes are just plain text, it is trivial to track changes
in your notes database using version control systems such as Git
(https://git-scm.com/).  Simply initialize ‘org-roam-directory’ as a Git
repository, and commit your files at regular or appropriate intervals.
Magit (https://magit.vc/) is a great interface to Git within Emacs.

   In addition, it may be useful to observe how a particular note has
evolved, by looking at the file history.  Git-timemachine
(https://gitlab.com/pidu/git-timemachine) allows you to visit historic
versions of a tracked Org-roam note.


File: org-roam.info,  Node: Full-text search interface with Deft,  Next: Org-journal,  Prev: Versioning Notes,  Up: Ecosystem

19.2.3 Full-text search interface with Deft
-------------------------------------------

Deft (https://jblevins.org/projects/deft/) provides a nice interface for
browsing and filtering org-roam notes.

     (use-package deft
       :after org
       :bind
       ("C-c n d" . deft)
       :custom
       (deft-recursive t)
       (deft-use-filter-string-for-filename t)
       (deft-default-extension "org")
       (deft-directory "/path/to/org-roam-files/"))

   If the title of the Org file is not the first line, you might not get
nice titles.  You may choose to patch this to use ‘org-roam’’s
functionality.  Here I’m using el-patch
(https://github.com/raxod502/el-patch):

     (use-package el-patch
       :straight (:host github
                        :repo "raxod502/el-patch"
                        :branch "develop"))

     (eval-when-compile
       (require 'el-patch))

     (use-package deft
       ;; same as above...
       :config/el-patch
       (defun deft-parse-title (file contents)
         "Parse the given FILE and CONTENTS and determine the title.
     If `deft-use-filename-as-title' is nil, the title is taken to
     be the first non-empty line of the FILE.  Else the base name of the FILE is
     used as title."
         (el-patch-swap (if deft-use-filename-as-title
                            (deft-base-filename file)
                          (let ((begin (string-match "^.+$" contents)))
                            (if begin
                                (funcall deft-parse-title-function
                                         (substring contents begin (match-end 0))))))
                        (org-roam--get-title-or-slug file))))

   The Deft interface can slow down quickly when the number of files get
huge.  Notdeft (https://github.com/hasu/notdeft) is a fork of Deft that
uses an external search engine and indexer.


File: org-roam.info,  Node: Org-journal,  Next: Note-taking Add-ons,  Prev: Full-text search interface with Deft,  Up: Ecosystem

19.2.4 Org-journal
------------------

Org-journal (https://github.com/bastibe/org-journal) is a more powerful
alternative to the simple function ‘org-roam-dailies-today’.  It
provides better journaling capabilities, and a nice calendar interface
to see all dated entries.

     (use-package org-journal
       :bind
       ("C-c n j" . org-journal-new-entry)
       :custom
       (org-journal-date-prefix "#+title: ")
       (org-journal-file-format "%Y-%m-%d.org")
       (org-journal-dir "/path/to/org-roam-files/")
       (org-journal-date-format "%A, %d %B %Y"))


File: org-roam.info,  Node: Note-taking Add-ons,  Prev: Org-journal,  Up: Ecosystem

19.2.5 Note-taking Add-ons
--------------------------

These are some plugins that make note-taking in Org-mode more enjoyable.

* Menu:

* Org-download::
* mathpix.el: mathpixel.
* Org-noter / Interleave::
* Bibliography::
* Spaced Repetition::


File: org-roam.info,  Node: Org-download,  Next: mathpixel,  Up: Note-taking Add-ons

Org-download
............

Org-download (https://github.com/abo-abo/org-download) lets you
screenshot and yank images from the web into your notes:

 [image src="images/org-download.gif" ]

Figure: org-download

     (use-package org-download
       :after org
       :bind
       (:map org-mode-map
             (("s-Y" . org-download-screenshot)
              ("s-y" . org-download-yank))))


File: org-roam.info,  Node: mathpixel,  Next: Org-noter / Interleave,  Prev: Org-download,  Up: Note-taking Add-ons

mathpix.el
..........

mathpix.el (https://github.com/jethrokuan/mathpix.el) uses Mathpix’s
(https://mathpix.com/) API to convert clips into latex equations:

 [image src="images/mathpix.gif" ]

Figure: mathpix

     (use-package mathpix.el
       :straight (:host github :repo "jethrokuan/mathpix.el")
       :custom ((mathpix-app-id "app-id")
                (mathpix-app-key "app-key"))
       :bind
       ("C-x m" . mathpix-screenshot))


File: org-roam.info,  Node: Org-noter / Interleave,  Next: Bibliography,  Prev: mathpixel,  Up: Note-taking Add-ons

Org-noter / Interleave
......................

Org-noter (https://github.com/weirdNox/org-noter) and Interleave
(https://github.com/rudolfochrist/interleave) are both projects that
allow synchronised annotation of documents (PDF, EPUB etc.)  within
Org-mode.


File: org-roam.info,  Node: Bibliography,  Next: Spaced Repetition,  Prev: Org-noter / Interleave,  Up: Note-taking Add-ons

Bibliography
............

org-roam-bibtex (https://github.com/org-roam/org-roam-bibtex) offers
tight integration between org-ref (https://github.com/jkitchin/org-ref),
helm-bibtex (https://github.com/tmalsburg/helm-bibtex) and ‘org-roam’.
This helps you manage your bibliographic notes under ‘org-roam’.


File: org-roam.info,  Node: Spaced Repetition,  Prev: Bibliography,  Up: Note-taking Add-ons

Spaced Repetition
.................

Org-fc (https://www.leonrische.me/fc/index.html) is a spaced repetition
system that scales well with a large number of files.  Other
alternatives include org-drill
(https://orgmode.org/worg/org-contrib/org-drill.html), and pamparam
(https://github.com/abo-abo/pamparam).


File: org-roam.info,  Node: FAQ,  Prev: Appendix,  Up: Top

20 FAQ
******

* Menu:

* How do I have more than one Org-roam directory?::
* How do I migrate from Roam Research?::
* How do I create a note whose title already matches one of the candidates?::


File: org-roam.info,  Node: How do I have more than one Org-roam directory?,  Next: How do I migrate from Roam Research?,  Up: FAQ

20.1 How do I have more than one Org-roam directory?
====================================================

Emacs supports directory-local variables, allowing the value of
‘org-roam-directory’ to be different in different directories.  It does
this by checking for a file named ‘.dir-locals.el’.

   To add support for multiple directories, override the
‘org-roam-directory’ variable using directory-local variables.  This is
what ‘.dir-locals.el’ may contain:

     ((nil . ((org-roam-directory . ".")
              (org-roam-db-location . "./org-roam.db"))))

   All files within that directory will be treated as their own separate
set of Org-roam files.  Remember to run ‘org-roam-db-build-cache’ from a
file within that directory, at least once.


File: org-roam.info,  Node: How do I migrate from Roam Research?,  Next: How do I create a note whose title already matches one of the candidates?,  Prev: How do I have more than one Org-roam directory?,  Up: FAQ

20.2 How do I migrate from Roam Research?
=========================================

Fabio has produced a command-line tool that converts markdown files
exported from Roam Research into Org-roam compatible markdown.  More
instructions are provided in the repository
(https://github.com/fabioberger/roam-migration).


File: org-roam.info,  Node: How do I create a note whose title already matches one of the candidates?,  Prev: How do I migrate from Roam Research?,  Up: FAQ

20.3 How do I create a note whose title already matches one of the candidates?
==============================================================================

This situation arises when, for example, one would like to create a note
titled “bar” when “barricade” already exists.

   The solution is dependent on the mini-buffer completion framework in
use.  Here are the solutions:

Ivy
     call ‘ivy-immediate-done’, typically bound to ‘C-M-j’.
     Alternatively, set ‘ivy-use-selectable-prompt’ to ‘t’, so that
     “bar” is now selectable.
Helm
     Org-roam should provide a selectable “[?]  bar” candidate at the
     top of the candidate list.

   Emacs 28.0.50 (Org mode 9.4)


Tag Table:
Node: Top765
Node: Introduction3039
Node: Target Audience5127
Node: A Brief Introduction to the Zettelkasten Method6996
Node: Installation9879
Node: Installing from MELPA10274
Node: Installing from Apt11575
Node: Installing from the Git Repository11945
Node: Post-Installation Tasks14954
Node: Getting Started15731
Node: Anatomy of an Org-roam File19677
Node: Titles20146
Node: Tags22004
Node: File Refs23905
Node: The Templating System24710
Node: Template Walkthrough26103
Node: Org-roam Template Expansion27915
Node: Concepts and Configuration29914
Node: Directories and Files30451
Node: The Org-roam Buffer31250
Node: Org-roam Files32509
Node: Inserting Links32811
Node: Navigating Around35722
Node: Index File35892
Node: Encryption36732
Node: Graphing37499
Node: Graph Options39630
Node: Excluding Nodes and Edges40644
Node: Org-roam Completion System41373
Node: Roam Protocol42128
Node: _42376
Node: Installation (1)42593
Node: The roam-file protocol47303
Node: The roam-ref protocol47665
Node: Daily Notes48852
Node: Diagnosing and Repairing Files49011
Node: Finding Unlinked References50909
Node: Performance Optimization51753
Node: Profiling Key Operations51991
Node: Garbage Collection52180
Node: Appendix53007
Node: Note-taking Workflows53177
Node: Ecosystem54424
Node: Browsing History with winner-mode54691
Node: Versioning Notes55554
Node: Full-text search interface with Deft56346
Node: Org-journal58351
Node: Note-taking Add-ons59057
Node: Org-download59391
Node: mathpixel59875
Node: Org-noter / Interleave60441
Node: Bibliography60820
Node: Spaced Repetition61261
Node: FAQ61666
Node: How do I have more than one Org-roam directory?61924
Node: How do I migrate from Roam Research?62829
Node: How do I create a note whose title already matches one of the candidates?63361

End Tag Table


Local Variables:
coding: utf-8
End:
